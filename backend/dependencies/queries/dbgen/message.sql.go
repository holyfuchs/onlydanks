// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package dbgen

import (
	"context"
	"time"
)

const addBlobSubmission = `-- name: AddBlobSubmission :one
INSERT INTO message.blob_submission (index, message, pubkey) VALUES ($1, $2, $3) 
ON CONFLICT (index, pubkey) DO NOTHING 
RETURNING id, index, message, pubkey
`

type AddBlobSubmissionParams struct {
	Index   []byte
	Message []byte
	Pubkey  []byte
}

// AddBlobSubmission
//
//	INSERT INTO message.blob_submission (index, message, pubkey) VALUES ($1, $2, $3)
//	ON CONFLICT (index, pubkey) DO NOTHING
//	RETURNING id, index, message, pubkey
func (q *Queries) AddBlobSubmission(ctx context.Context, arg AddBlobSubmissionParams) (MessageBlobSubmission, error) {
	row := q.db.QueryRow(ctx, addBlobSubmission, arg.Index, arg.Message, arg.Pubkey)
	var i MessageBlobSubmission
	err := row.Scan(
		&i.ID,
		&i.Index,
		&i.Message,
		&i.Pubkey,
	)
	return i, err
}

const addENSSubdomain = `-- name: AddENSSubdomain :exec
INSERT INTO message.ens_subdomain (subdomain, address) VALUES ($1, $2)
`

type AddENSSubdomainParams struct {
	Subdomain string
	Address   string
}

// AddENSSubdomain
//
//	INSERT INTO message.ens_subdomain (subdomain, address) VALUES ($1, $2)
func (q *Queries) AddENSSubdomain(ctx context.Context, arg AddENSSubdomainParams) error {
	_, err := q.db.Exec(ctx, addENSSubdomain, arg.Subdomain, arg.Address)
	return err
}

const addMessage = `-- name: AddMessage :one
INSERT INTO message.blob (index, message, submit_time, needs_submission) VALUES ($1, $2, $3, $4) 
ON CONFLICT (index) DO UPDATE SET submit_time = EXCLUDED.submit_time, needs_submission = EXCLUDED.needs_submission 
RETURNING id, index, message, submit_time, needs_submission
`

type AddMessageParams struct {
	Index           []byte
	Message         []byte
	SubmitTime      time.Time
	NeedsSubmission bool
}

// AddMessage
//
//	INSERT INTO message.blob (index, message, submit_time, needs_submission) VALUES ($1, $2, $3, $4)
//	ON CONFLICT (index) DO UPDATE SET submit_time = EXCLUDED.submit_time, needs_submission = EXCLUDED.needs_submission
//	RETURNING id, index, message, submit_time, needs_submission
func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (MessageBlob, error) {
	row := q.db.QueryRow(ctx, addMessage,
		arg.Index,
		arg.Message,
		arg.SubmitTime,
		arg.NeedsSubmission,
	)
	var i MessageBlob
	err := row.Scan(
		&i.ID,
		&i.Index,
		&i.Message,
		&i.SubmitTime,
		&i.NeedsSubmission,
	)
	return i, err
}

const addPubkey = `-- name: AddPubkey :one
INSERT INTO message.pubkey (pubkey, submit_time) VALUES ($1, $2) 
ON CONFLICT (pubkey) DO UPDATE SET submit_time = EXCLUDED.submit_time 
RETURNING pubkey, submit_time
`

type AddPubkeyParams struct {
	Pubkey     []byte
	SubmitTime time.Time
}

// AddPubkey
//
//	INSERT INTO message.pubkey (pubkey, submit_time) VALUES ($1, $2)
//	ON CONFLICT (pubkey) DO UPDATE SET submit_time = EXCLUDED.submit_time
//	RETURNING pubkey, submit_time
func (q *Queries) AddPubkey(ctx context.Context, arg AddPubkeyParams) (MessagePubkey, error) {
	row := q.db.QueryRow(ctx, addPubkey, arg.Pubkey, arg.SubmitTime)
	var i MessagePubkey
	err := row.Scan(&i.Pubkey, &i.SubmitTime)
	return i, err
}

const getBlobSubmissions = `-- name: GetBlobSubmissions :many
SELECT id, index, message, pubkey FROM message.blob_submission
`

// GetBlobSubmissions
//
//	SELECT id, index, message, pubkey FROM message.blob_submission
func (q *Queries) GetBlobSubmissions(ctx context.Context) ([]MessageBlobSubmission, error) {
	rows, err := q.db.Query(ctx, getBlobSubmissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MessageBlobSubmission
	for rows.Next() {
		var i MessageBlobSubmission
		if err := rows.Scan(
			&i.ID,
			&i.Index,
			&i.Message,
			&i.Pubkey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlobUpdate = `-- name: GetBlobUpdate :one
SELECT block_height FROM message.blob_update LIMIT 1
`

// GetBlobUpdate
//
//	SELECT block_height FROM message.blob_update LIMIT 1
func (q *Queries) GetBlobUpdate(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getBlobUpdate)
	var block_height int64
	err := row.Scan(&block_height)
	return block_height, err
}

const getENSSubdomainByAddress = `-- name: GetENSSubdomainByAddress :one
SELECT subdomain, address FROM message.ens_subdomain WHERE address = $1
`

// GetENSSubdomainByAddress
//
//	SELECT subdomain, address FROM message.ens_subdomain WHERE address = $1
func (q *Queries) GetENSSubdomainByAddress(ctx context.Context, address string) (MessageEnsSubdomain, error) {
	row := q.db.QueryRow(ctx, getENSSubdomainByAddress, address)
	var i MessageEnsSubdomain
	err := row.Scan(&i.Subdomain, &i.Address)
	return i, err
}

const getMessagesByIndex = `-- name: GetMessagesByIndex :many
SELECT id, index, message, submit_time, needs_submission FROM message.blob WHERE index = $1
`

// GetMessagesByIndex
//
//	SELECT id, index, message, submit_time, needs_submission FROM message.blob WHERE index = $1
func (q *Queries) GetMessagesByIndex(ctx context.Context, index []byte) ([]MessageBlob, error) {
	rows, err := q.db.Query(ctx, getMessagesByIndex, index)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MessageBlob
	for rows.Next() {
		var i MessageBlob
		if err := rows.Scan(
			&i.ID,
			&i.Index,
			&i.Message,
			&i.SubmitTime,
			&i.NeedsSubmission,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPubkeysSince = `-- name: GetPubkeysSince :many
SELECT pubkey, submit_time FROM message.pubkey WHERE submit_time > $1 LIMIT 1000
`

// GetPubkeysSince
//
//	SELECT pubkey, submit_time FROM message.pubkey WHERE submit_time > $1 LIMIT 1000
func (q *Queries) GetPubkeysSince(ctx context.Context, submitTime time.Time) ([]MessagePubkey, error) {
	rows, err := q.db.Query(ctx, getPubkeysSince, submitTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MessagePubkey
	for rows.Next() {
		var i MessagePubkey
		if err := rows.Scan(&i.Pubkey, &i.SubmitTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBlobSubmission = `-- name: RemoveBlobSubmission :exec
DELETE FROM message.blob_submission WHERE id = $1
`

// RemoveBlobSubmission
//
//	DELETE FROM message.blob_submission WHERE id = $1
func (q *Queries) RemoveBlobSubmission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeBlobSubmission, id)
	return err
}

const setBlobUpdate = `-- name: SetBlobUpdate :exec
INSERT INTO message.blob_update (block_height) VALUES ($1)
`

// SetBlobUpdate
//
//	INSERT INTO message.blob_update (block_height) VALUES ($1)
func (q *Queries) SetBlobUpdate(ctx context.Context, blockHeight int64) error {
	_, err := q.db.Exec(ctx, setBlobUpdate, blockHeight)
	return err
}

const updateBlobUpdate = `-- name: UpdateBlobUpdate :exec
UPDATE message.blob_update SET block_height = $1
`

// UpdateBlobUpdate
//
//	UPDATE message.blob_update SET block_height = $1
func (q *Queries) UpdateBlobUpdate(ctx context.Context, blockHeight int64) error {
	_, err := q.db.Exec(ctx, updateBlobUpdate, blockHeight)
	return err
}
